# Project metadata (PEP 621) ===============================================
[project]
name = "FAST-OAD-core"
description = "FAST-OAD is a framework for performing rapid Overall Aircraft Design"
readme = "README.md"
license = "GPL-3.0-only"
keywords = [
    "aircraft",
    "design",
    "multi-disciplinary"
]
authors = [
    {name = "Christophe DAVID", email = "christophe.david@onera.fr"},
    {name = "Scott DELBECQ", email = "Scott.DELBECQ@isae-supaero.fr"}
]
maintainers = [
    { name = "Florent LUTZ", email = "Florent.LUTZ2@isae-supaero.fr" },
    { name = "Eric NGUYEN VAN", email = "Eric.Nguyen_Van@onera.fr" },
    { name = "Enrico STRAGIOTTI", email = "enrico.stragiotti@onera.fr" },
]
requires-python = ">=3.9,<3.13"
dynamic = ["version","classifiers"] # Needed to use poetry-dynamic-versioning

# User dependencies ------------------------------------------------------------
dependencies = [
    # IMPORTANT: when modifying this list, docs/requirements.txt must be updated for
    # ReadTheDocs to be able to compile the documentation.
    # A pre-commit hook has been added to do this task. As a result, any modification
    # of poetry.lock file will modify docs/requirements.txt and make
    # the commit fail because "files were modified by this hook". In that case,
    # doing again the commit including changes in docs/requirements.txt will succeed.
    "numpy>=1.23.2,<3",
    "scipy>=1.11.2,<2",
    "pandas>=1.3.4,<3; python_version<'3.11'",
    "pandas>=1.5.3,<3; python_version=='3.11'",
    "pandas>=2.1.1,<3; python_version>='3.12'",
    "openmdao>3.27,<3.39",
    "ipopo>=1.0.0,<2; python_version<'3.10'",
    "ipopo>=3.0.0,<4; python_version>='3.10'",
    "ipywidgets>=7.7.0,<9",
    "ipysheet>=0.5.0,<1",
    "plotly>=6.2.0,<7",
    "wop>=2.2.0,<3",
    "lxml>=4.6.5,<6; python_version<'3.11'",
    "lxml>=4.9.3,<6; python_version>='3.11'",
    "tomlkit>=0.5.3,<1",
    "ruamel.yaml>=0.15.78,<0.18",
    "jsonschema>=3.2.0,<5",
    "ensure>=1.0.0,<2; python_version<'3.12'",
    "ensure>=1.0.4,<2; python_version>='3.12'",
    "tabulate>=0.8.9,<1",
    "aenum>=3.1.0,<4",
    "jupyterlab>=3.4.7,<4; python_version<'3.12'",
    "jupyterlab>=4.2,<5; python_version>='3.12'",
    "stdatm>=0.4.2,<1",
    "Deprecated>=1.2.13,<2",
    "click>=8.0.3,<9",
    "pyDOE3>=1.0.0,<2",
    "importlib-metadata>=4.2,<5; python_version<'3.10'",
    "rich>=14.0.0,<15",
    "anywidget>=0.9.18,<1"
]

[project.optional-dependencies]
# Activated with:
#    poetry install --extras mpi
# or, as a user:
#    pip install fast-oad-core[mpi]
mpi = ["mpi4py>=4.0.2,<5"]

[project.urls]
homepage = "https://github.com/fast-aircraft-design/FAST-OAD"
documentation = "https://fast-oad.readthedocs.io/en/stable/"

# Entry points -----------------------------------------------------------------
[project.scripts]
fastoad = "fastoad.cmd.cli:fast_oad"
fast-oad = "fastoad.cmd.cli:fast_oad"

[project.entry-points."fastoad.plugins"]
bundled = "fastoad"


# Poetry settings ==============================================================
[tool.poetry]
version = "1.8.3"  # This version number is overwritten by GitHub packaging workflow but setting this version here will allow installation of CS25 models in development mode
packages = [
    { include = "fastoad", from = "src" },
]
exclude = ["**/tests/**"]

#  Suitable classifiers based on python requirement and license are not automatically added if classifiers are statically defined in the project section
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console", 
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics"
]

# Development dependencies -----------------------------------------------------
# Development dependencies using Poetry groups instead of [project.optional-dependencies]
[tool.poetry.group.dev.dependencies]
fast-oad-cs25 = ">=0.7.1"
matplotlib = "^3.9.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0"
pytest-cov = "^5.0"
coverage = { version = "^7.0", extras = ["toml"] }
nbval = "^0.11"
wrapt = "^1.16.0"

[tool.poetry.group.doc.dependencies]
sphinx = ">=7.1.2"
sphinx-rtd-theme = ">=2.0"
sphinxcontrib-bibtex = "^2.6.3"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.5.0"
nbstripout = "^0.6.0"
ruff = "0.6.9"


# Poetry plugins ==================================================
[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9" # Used for the poetry export hook in pre-commit


# Dynamic versioning settings ==================================================
# poetry-dynamic-versioning has to be installed in the same environment as
# Poetry (normally outside your project environment).
# see https://github.com/mtkennerly/poetry-dynamic-versioning#installation
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"


# Packaging system =============================================================
[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


# Ruff settings ================================================================
[tool.ruff]
line-length = 100
target-version = "py39"
extend-include = ["*.ipynb"]
exclude = ["tests/dummy_plugins/"]

[tool.ruff.lint.isort] # Add optional configurations for import organization
case-sensitive = true
relative-imports-order = "closest-to-furthest"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default. "I" is for isort rules.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


# Pytest settings ==============================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--cov-report term-missing --cov-report html --verbose"
testpaths = ["src"]
norecursedirs = ["dist", "build", ".tox", ".ipynb_checkpoints"]
markers = ["mpi: marks tests that use MPI"]


# Coverage settings ============================================================
[tool.coverage.run]
branch = true
source = ["fastoad"]
omit = ["*/test/*", "*/tests/*"]

# Lines below according to https://pytest-cov.readthedocs.io/en/latest/subprocess-support.html#if-you-use-multiprocessing
concurrency = ["multiprocessing"]
parallel = true
sigterm = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ = = .__main__.:"
]
